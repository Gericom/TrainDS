#include <nitro.h>
#include <nnsys/g3d.h>
#include "core.h"
#include "Water.h"

static void G3_Vtx32(VecFx32* pos)
{
	G3_PushMtx();
	G3_Translate(pos->x, pos->y, pos->z);
	G3_Vtx10(0, 0, 0);
	G3_PopMtx(1);
}

void Water::Render()
{
	G3_TexImageParam(GX_TEXFMT_NONE, GX_TEXGEN_NONE, GX_TEXSIZE_S8, GX_TEXSIZE_T8, GX_TEXREPEAT_NONE, GX_TEXFLIP_NONE, GX_TEXPLTTCOLOR0_USE, 0);
	G3_PushMtx();
	{
		G3_Translate(mPosition.x, mPosition.y + mDepth/* / 2*/, mPosition.z);
		G3_Scale(mWidth, /*mDepth / 2*/FX32_ONE, mHeight);
		//G3_PolygonAttr(GX_LIGHTMASK_0, GX_POLYGONMODE_SHADOW, GX_CULL_NONE, 0, 24, /*GX_POLYGON_ATTR_MISC_FOG | */GX_POLYGON_ATTR_MISC_FAR_CLIPPING);
		//G3_PolygonAttr(GX_LIGHTMASK_0, GX_POLYGONMODE_MODULATE, GX_CULL_NONE, 0, 31, GX_POLYGON_ATTR_MISC_FOG | GX_POLYGON_ATTR_MISC_FAR_CLIPPING);
		//front
		G3_PolygonAttr(GX_LIGHTMASK_0, GX_POLYGONMODE_MODULATE, GX_CULL_BACK, 8, 24, GX_POLYGON_ATTR_MISC_FOG | GX_POLYGON_ATTR_MISC_FAR_CLIPPING | GX_POLYGON_ATTR_MISC_XLU_DEPTH_UPDATE);
		G3_Color(GX_RGB(42 / 8, 61 / 8, 64 / 8));
		G3_Begin(GX_BEGIN_QUADS);
		{
			G3_Vtx(-FX16_ONE, 0, -FX16_ONE);
			G3_Vtx(-FX16_ONE, 0, FX16_ONE);
			G3_Vtx(FX16_ONE, 0, FX16_ONE);
			G3_Vtx(FX16_ONE, 0, -FX16_ONE);
		}
		G3_End();
		//back
		G3_PolygonAttr(GX_LIGHTMASK_0, GX_POLYGONMODE_MODULATE, GX_CULL_FRONT, 9, 24, GX_POLYGON_ATTR_MISC_FOG | GX_POLYGON_ATTR_MISC_FAR_CLIPPING);
		G3_Color(GX_RGB(42 / 8, 61 / 8, 64 / 8));
		G3_Begin(GX_BEGIN_QUADS);
		{
			G3_Vtx(-FX16_ONE, 0, -FX16_ONE);
			G3_Vtx(-FX16_ONE, 0, FX16_ONE);
			G3_Vtx(FX16_ONE, 0, FX16_ONE);
			G3_Vtx(FX16_ONE, 0, -FX16_ONE);
		}
		G3_End();
		G3_Translate(0, FX32_ONE / 24, 0);
		//front
		G3_PolygonAttr(GX_LIGHTMASK_0, GX_POLYGONMODE_MODULATE, GX_CULL_BACK, 8, 8, GX_POLYGON_ATTR_MISC_FOG | GX_POLYGON_ATTR_MISC_FAR_CLIPPING);
		G3_Color(GX_RGB(31,31,31));
		G3_Begin(GX_BEGIN_QUADS);
		{
			G3_Vtx(-FX16_ONE, 0, -FX16_ONE);
			G3_Vtx(-FX16_ONE, 0, FX16_ONE);
			G3_Vtx(FX16_ONE, 0, FX16_ONE);
			G3_Vtx(FX16_ONE, 0, -FX16_ONE);
		}
		G3_End();
		//back
		/*G3_Translate(0, - 2 * FX32_ONE / 24, 0);
		G3_PolygonAttr(GX_LIGHTMASK_0, GX_POLYGONMODE_MODULATE, GX_CULL_FRONT, 9, 8, GX_POLYGON_ATTR_MISC_FOG | GX_POLYGON_ATTR_MISC_FAR_CLIPPING);
		G3_Color(GX_RGB(31, 31, 31));
		G3_Begin(GX_BEGIN_QUADS);
		{
			G3_Vtx(-FX16_ONE, 0, -FX16_ONE);
			G3_Vtx(-FX16_ONE, 0, FX16_ONE);
			G3_Vtx(FX16_ONE, 0, FX16_ONE);
			G3_Vtx(FX16_ONE, 0, -FX16_ONE);
		}
		G3_End();*/
	}
	G3_PopMtx(1);
}

void Water::Render2()
{
	/*G3_TexImageParam(GX_TEXFMT_NONE, GX_TEXGEN_NONE, GX_TEXSIZE_S8, GX_TEXSIZE_T8, GX_TEXREPEAT_NONE, GX_TEXFLIP_NONE, GX_TEXPLTTCOLOR0_USE, 0);
	G3_PushMtx();
	{
		G3_Translate(32 * FX32_ONE, 0, 32 * FX32_ONE);
		G3_Translate(mPosition.x, mPosition.y + mDepth/* / 2/, mPosition.z);
		G3_Scale(mWidth, /*mDepth / 2/FX32_ONE, mHeight);
		G3_PolygonAttr(GX_LIGHTMASK_0, GX_POLYGONMODE_SHADOW, GX_CULL_NONE, 8, 24, /*GX_POLYGON_ATTR_MISC_FOG | /GX_POLYGON_ATTR_MISC_FAR_CLIPPING);
		//G3_PolygonAttr(GX_LIGHTMASK_0, GX_POLYGONMODE_MODULATE, GX_CULL_NONE, 0, 31, GX_POLYGON_ATTR_MISC_FOG | GX_POLYGON_ATTR_MISC_FAR_CLIPPING);
		//G3_PolygonAttr(GX_LIGHTMASK_0, GX_POLYGONMODE_MODULATE, GX_CULL_NONE, 8, 24, GX_POLYGON_ATTR_MISC_FOG | GX_POLYGON_ATTR_MISC_FAR_CLIPPING);
		G3_Color(GX_RGB(42 / 8, 61 / 8, 64 / 8));
		G3_Begin(GX_BEGIN_QUADS);
		{
			G3_Vtx(-FX16_ONE, 0, -FX16_ONE);
			G3_Vtx(-FX16_ONE, 0, FX16_ONE);
			G3_Vtx(FX16_ONE, 0, FX16_ONE);
			G3_Vtx(FX16_ONE, 0, -FX16_ONE);
			/*G3_Vtx(FX16_ONE, -FX16_ONE, FX16_ONE);
			G3_VtxXY(FX16_ONE, FX16_ONE);
			G3_VtxXY(-FX16_ONE, FX16_ONE);
			G3_VtxXY(-FX16_ONE, -FX16_ONE);

			G3_Vtx(-FX16_ONE, -FX16_ONE, -FX16_ONE);
			G3_VtxXY(-FX16_ONE, FX16_ONE);
			G3_VtxXY(FX16_ONE, FX16_ONE);
			G3_VtxXY(FX16_ONE, -FX16_ONE);

			G3_Vtx(-FX16_ONE, -FX16_ONE, FX16_ONE);
			G3_VtxYZ(FX16_ONE, FX16_ONE);
			G3_VtxYZ(FX16_ONE, -FX16_ONE);
			G3_VtxYZ(-FX16_ONE, -FX16_ONE);

			G3_Vtx(FX16_ONE, -FX16_ONE, -FX16_ONE);
			G3_VtxYZ(FX16_ONE, -FX16_ONE);
			G3_VtxYZ(FX16_ONE, FX16_ONE);
			G3_VtxYZ(-FX16_ONE, FX16_ONE);

			G3_Vtx(-FX16_ONE, FX16_ONE, -FX16_ONE);
			G3_VtxXZ(-FX16_ONE, FX16_ONE);
			G3_VtxXZ(FX16_ONE, FX16_ONE);
			G3_VtxXZ(FX16_ONE, -FX16_ONE);

			G3_Vtx(-FX16_ONE, -FX16_ONE, FX16_ONE);
			G3_VtxXZ(-FX16_ONE, -FX16_ONE);
			G3_VtxXZ(FX16_ONE, -FX16_ONE);
			G3_VtxXZ(FX16_ONE, FX16_ONE);/
		}
		G3_End();
		/*G3_Translate(0, FX32_ONE / 24, 0);
		G3_PolygonAttr(GX_LIGHTMASK_0, GX_POLYGONMODE_MODULATE, GX_CULL_NONE, 8, 8, GX_POLYGON_ATTR_MISC_FOG | GX_POLYGON_ATTR_MISC_FAR_CLIPPING);
		G3_Color(GX_RGB(31,31,31));
		G3_Begin(GX_BEGIN_QUADS);
		{
		G3_Vtx(-FX16_ONE, 0, -FX16_ONE);
		G3_Vtx(-FX16_ONE, 0, FX16_ONE);
		G3_Vtx(FX16_ONE, 0, FX16_ONE);
		G3_Vtx(FX16_ONE, 0, -FX16_ONE);
		}
		G3_End();/
	}
	G3_PopMtx(1);*/
}